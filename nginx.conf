worker_processes 1;
daemon off;

error_log stderr;
events { worker_connections 1024; }

http {
  charset utf-8;
  log_format cloudfoundry 'NginxLog "$request" $status $body_bytes_sent';
  access_log /dev/stdout cloudfoundry;
  default_type application/octet-stream;

  auth_basic access_required;
  auth_basic_user_file /home/vcap/app/http_creds;

  tcp_nopush on;
  keepalive_timeout 30;
  port_in_redirect off; # Ensure that redirects don't include the internal container PORT

  server {
    listen {{port}};

    location / {

        # client_body_buffer_size and client_max_body_size should match, to
        # ensure the $request_body will have data.
        # (8K is the default buffer size, and probably more than enough for log messages.)
        client_body_buffer_size 8K;
        client_max_body_size 8K;
        lua_need_request_body on;

        if ($request_method = POST) {
          content_by_lua_block {
             local sock = ngx.socket.tcp()
             local ok, err = sock:connect("127.0.0.1", 8888)
             if not ok then
                ngx.log(ngx.ERR, err)
                return ngx.exit(ngx.HTTP_BAD_GATEWAY)
             end
             local bytes, err = sock:send(ngx.var.request_body)
             sock:close()
             if err then
                ngx.log(ngx.ERR, err)
                return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
             end
             return ngx.exit(ngx.HTTP_CREATED)
          }
        }
        if ($request_method != POST) {
          # We don't want anything but POSTs.
          return 400;
        }
    }
  }
}
